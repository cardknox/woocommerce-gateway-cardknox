let cartTotal={total:parseFloat(applePaysettings.total).toFixed(2)};jQuery(document.body).on("updated_cart_totals",(function(){jQuery.ajax({url:applePaysettings.ajax_url,type:"POST",data:{action:"update_cart_total"},success:function(e){e.success&&(cartTotal.total=e.data.total)}}),""==applePaysettings.merchant_identifier||null==applePaysettings.merchant_identifier||0==applePaysettings.merchant_identifier.length?jQuery(".applepay-error").html("<div class='woocommerce-error' role='alert'>Please contact support. Failed to initialize Apple Pay. </div>").show():ckApplePay.enableApplePay({initFunction:"apRequest.initAP",amountField:"amount"})})),document.addEventListener("DOMContentLoaded",(function(e){ckApplePay.enableApplePay({initFunction:"apRequest.initAP",amountField:"amount"})}));let lastSelectedShippingMethod="";const apRequest={buttonOptions:{buttonContainer:"ap-container",buttonColor:getApButtonColor(applePaysettings),buttonType:getApButtonType(applePaysettings)},totalAmount:null,taxAmt:null,shippingMethod:null,creditType:null,getTransactionInfo:function(){try{return{total:{type:"final",label:"Total",amount:parseFloat(cartTotal.total).toFixed(2).toString()}}}catch(e){console.error("getTransactionInfo error ",exMsg(e))}},onGetTransactionInfo:function(){try{return this.getTransactionInfo()}catch(e){console.error("onGetTransactionInfo error ",exMsg(e))}},onGetShippingMethods:function(){return applePaysettings.shippingMethods},onShippingContactSelected:function(e){const t=this;return new Promise((function(n,o){try{logDebug({label:"shippingContact",data:JSON.stringify(e)});const o=e&&e.administrativeArea;let a=.1;const r=applePaysettings.shippingMethods;resp=t.getTransactionInfo(a,r[0]),resp.shippingMethods=r,o&&"HI"==e.administrativeArea&&(resp.error={code:APErrorCode.addressUnserviceable,contactField:APErrorContactField.administrativeArea,message:"Shipping is not available for the given address"}),n(resp)}catch(e){logError("onShippingContactSelected error.",e),o({errors:[e]})}}))},onShippingMethodSelected:function(e){const t=this;return new Promise((function(n,o){try{logDebug({label:"shippingMethod",data:JSON.stringify(e)}),lastSelectedShippingMethod=e;n(t.getTransactionInfo(null,e))}catch(e){logError("onShippingMethodSelected error.",e),o({errors:[e]})}}))},onPaymentMethodSelected:function(e){const t=this;return new Promise(((n,o)=>{try{console.log("paymentMethod",JSON.stringify(e));n(t.getTransactionInfo(null,null,e.type))}catch(e){exMsg(e);console.error("onPaymentMethodSelected error.",exMsg(e)),o({errors:[e]})}}))},validateApplePayMerchant:function(){return new Promise(((e,t)=>{try{var n=new XMLHttpRequest;n.open("POST","https://api.cardknox.com/applepay/validate"),n.onload=function(){this.status>=200&&this.status<300?(console.log("validateApplePayMerchant",JSON.stringify(n.response)),e(n.response)):(console.error("validateApplePayMerchant",JSON.stringify(n.response),this.status),t({status:this.status,statusText:n.response}))},n.onerror=function(){console.error("validateApplePayMerchant",n.statusText,this.status),t({status:this.status,statusText:n.statusText})},n.setRequestHeader("Content-Type","application/json"),n.send()}catch(e){setTimeout((function(){console.log("getApplePaySession error: "+exMsg(e))}),100)}}))},onValidateMerchant:function(){return new Promise(((e,t)=>{try{this.validateApplePayMerchant().then((n=>{try{console.log(n),e(n)}catch(e){console.error("validateApplePayMerchant exception.",JSON.stringify(e)),t(e)}})).catch((e=>{console.error("validateApplePayMerchant error.",JSON.stringify(e)),t(e)}))}catch(e){console.error("onValidateMerchant error.",JSON.stringify(e)),t(e)}}))},authorize:function(e,t){if(console.log(e),e.token.paymentData.data){var n=btoa(JSON.stringify(e.token.paymentData));jQuery("#applePaytoken").val(n);let o=e.billingContact.givenName,a=e.billingContact.familyName,r=e.billingContact.addressLines.filter((function(e){return e})).join(" "),i=e.billingContact.administrativeArea,s=e.billingContact.countryCode,p=e.billingContact.postalCode,l=e.billingContact.locality,c=e.shippingContact.givenName,u=e.shippingContact.familyName,d=e.shippingContact.emailAddress,h=e.shippingContact.phoneNumber;h=h.substring(h.indexOf(" ")+1),applePaycreateWooCommerceOrder(n,t,{firstName:o,lastName:a,emailAddress:d,phoneNumber:h,address:r,administrativeArea:i,country:s,postcode:p,city:l},{firstName:c,lastName:u,emailAddress:d,phoneNumber:h,address:e.shippingContact.addressLines.filter((function(e){return e})).join(" "),administrativeArea:e.shippingContact.administrativeArea,country:e.shippingContact.countryCode,postcode:e.shippingContact.postalCode,city:e.shippingContact.locality},lastSelectedShippingMethod)}},onPaymentAuthorize:function(e){const t=parseFloat(cartTotal.total).toFixed(2);return new Promise(((n,o)=>{try{this.authorize(e,t.toString()).then((e=>{try{console.log(e);const t=JSON.parse(e);if(!t)throw"Invalid response: "+e;if(t.xError)throw t;n(e)}catch(e){throw e}})).catch((e=>{console.error("authorizeAPay error.",JSON.stringify(e)),apRequest.handleAPError(e),o(e)}))}catch(e){console.error("onPaymentAuthorize error.",JSON.stringify(e)),apRequest.handleAPError(e),o(e)}}))},handleAPError:function(e){e&&e.xRefNum?setAPPayload("There was a problem with your order:("+e.xRefNum+")"):setAPPayload("There was a problem with your order:"+exMsg(e))},initAP:function(){return{buttonOptions:this.buttonOptions,merchantIdentifier:applePaysettings.merchant_identifier,requiredBillingContactFields:["postalAddress","name","phone","email"],requiredShippingContactFields:["postalAddress","name","phone","email"],onGetTransactionInfo:"apRequest.onGetTransactionInfo",onGetShippingMethods:"apRequest.onGetShippingMethods",onPaymentMethodSelected:"apRequest.onPaymentMethodSelected",onShippingContactSelected:"apRequest.onShippingContactSelected",onShippingMethodSelected:"apRequest.onShippingMethodSelected",onValidateMerchant:"apRequest.onValidateMerchant",onPaymentAuthorize:"apRequest.onPaymentAuthorize",onPaymentComplete:"apRequest.onPaymentComplete",onAPButtonLoaded:"apRequest.apButtonLoaded",isDebug:!0}},isSupportedApplePay:function(){return!(!window.ApplePaySession||!ApplePaySession.canMakePayments())},apButtonLoaded:function(e){e&&(e.status===iStatus.success?showHide(this.buttonOptions.buttonContainer,!0):e.reason&&(jQuery(".applepay-error").html("<div class='woocommerce-error'>"+e.reason+"</div>").show(),console.log(e.reason)),0==this.isSupportedApplePay()?jQuery(".woocommerce-checkout .payment_method_cardknox-applepay").hide():jQuery(".woocommerce-checkout .payment_method_cardknox-applepay").show())}};function setAPPayload(e){console.log(e)}function showHide(e,t){"string"==typeof e&&(e=document.getElementById(e)),e&&(t?e.classList.remove("hidden"):e.classList.add("hidden"))}function getAmount(){var e=applePaysettings.total;return parseFloat(e).toFixed(2)}function getApButtonColor(e){var t=APButtonColor.black;switch(e.button_style){case"black":default:t=APButtonColor.black;break;case"white":t=APButtonColor.white;break;case"whiteOutline":t=APButtonColor.whiteOutline}return t}function getApButtonType(e){var t=APButtonType.pay;switch(e.button_type){case"pay":default:t=APButtonType.pay;break;case"buy":t=APButtonType.buy;break;case"plain":t=APButtonType.plain;break;case"order":t=APButtonType.order;break;case"donate":t=APButtonType.donate;break;case"continue":t=APButtonType.continue;break;case"checkout":t=APButtonType.checkout}return t}function applePaycreateWooCommerceOrder(e,t,n,o,a){jQuery.ajax({url:applePaysettings.ajax_url,type:"POST",data:{action:"applepay_cardknox_create_order",apple_pay_token:e,amount:t,billingContact:JSON.stringify(n),shippingContact:JSON.stringify(o),selectedShipping:JSON.stringify(a),security:applePaysettings.create_order_nonce},success:function(e){e.success?window.location.href=e.data.redirect_url:(jQuery(".applepay-error").html("<div> "+e.data+" </div>").show(),setTimeout((function(){jQuery(".applepay-error").html("").hide()}),3e3))},error:function(e){console.log(e),jQuery(".applepay-error").html("<div> "+e.responseText+" </div>").show(),setTimeout((function(){jQuery(".applepay-error").html("").hide()}),3e3)}})}